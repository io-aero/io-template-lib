name: Standards

on:
  pull_request:
    branches: [ 'main' ]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  standards:
    # --------------------------------------------------------------------------
    # Perform all development-specific tools, including formatting, static code
    # analysis, style enforcement and documentation creation. Changes in the code
    # or in the documentation are also replicated in the repository.
    # --------------------------------------------------------------------------
    name: OS ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      max-parallel: 1
      matrix:
        os: ["ubuntu-22.04"]
        python-version: ["3.10"]
    steps:
      - name: Show the repository variables
        run: |
          echo CONDA=${{ vars.CONDA }}
          echo COVERALLS=${{ vars.COVERALLS }}
      - name: Checking out the repository
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Set up Miniconda
        if: ${{ vars.CONDA }} == "true"
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          miniconda-version: "latest"
          python-version: ${{ matrix.python-version }}
      - name: Install conda dependencies - Conda 1/2
        if: ${{ vars.CONDA }} == "true"
        run: |
          echo CONDA=${{ vars.CONDA }}
          conda init bash
      - name: Install conda dependencies - Conda 2/2
        if: ${{ vars.CONDA }} == "true"
        run: make conda-action
      - name: Install dev dependencies - pipenv
        run: make pipenv-dev
      - name: Run the whole software quality chain
        run: make isort black lint docs tests
      - name: Check if there are any changes
        id: verify_diff
        run: |
            git diff --quiet . || echo "changed=true" >> $GITHUB_OUTPUT
      - name: Commit documentation and sourcecode # transfer the new html files back into the repository
        if: steps.verify_diff.outputs.changed == 'true'
        run: |
          git config --local user.name  ${{ github.actor }}
          # git config --global user.email ${{ secrets.GLOBAL_USER_EMAIL }}
          git add .
          git commit -a -m "Updating the repository GitHub html pages in the docs folder"
      - name: Push changes  # push the output folder to your repo
        if: steps.verify_diff.outputs.changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          force: true
      - name: Create the coverage data
        if: ${{ vars.COVERALLS }} == "true"
        run: |
          echo COVERALLS=${{ vars.COVERALLS }}
          make coveralls
      - name: Publish the code coverage to coveralls.io
        if: ${{ vars.COVERALLS }} == "true"
        uses: coverallsapp/github-action@v2
